---
import HomeLayout from 'src/layouts/HomeLayout.astro'
import Form from 'src/components/Form/Form.astro'
---

<HomeLayout>
  <div class="text-center font-extrabold text-black text-3xl md:text-5xl mb-10">
    Get curated show or movie recommendations with Open AI
  </div>
  <Form />
  <div class="recommendations flex gap-4 direction flex-col"></div>
</HomeLayout>

<script>
  import generatePromptFromFormData from 'src/utils/generatePromptFromFormData'
  import { getRecommendationInfo } from 'src/utils/getRecommendationInfo'

  const form = document.querySelector('form') as HTMLFormElement
  const buttonSubmit = document.querySelector(
    'button[type="submit"]',
  ) as HTMLButtonElement
  const recommendationsElement = document.querySelector(
    '.recommendations',
  ) as HTMLParagraphElement
  const activeClasses = ['bg-indigo-600', 'hover:bg-indigo-600']
  const disabledClass = ['bg-indigo-400', 'cursor-not-allowed']

  function addLoader() {
    if (buttonSubmit) {
      buttonSubmit.disabled = true
      activeClasses.forEach(activeClass => {
        buttonSubmit.classList.remove(activeClass)
      })
      disabledClass.forEach(disabledClass => {
        buttonSubmit.classList.add(disabledClass)
      })
      buttonSubmit.innerHTML = `
          <svg
            class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"
            />
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            />
          </svg>
          Processing...
        `
    }
  }

  function removeLoader() {
    if (buttonSubmit) {
      buttonSubmit.disabled = false
      buttonSubmit.innerHTML = `<p>Curate My List</p>`
      disabledClass.forEach(disabledClass => {
        buttonSubmit.classList.remove(disabledClass)
      })
      activeClasses.forEach(activeClass => {
        buttonSubmit.classList.add(activeClass)
      })
    }
  }

  function appendNewChild(
    title: string,
    description: string,
    position: number,
  ) {
    const newElement = document.createElement('div')
    newElement.classList.add(
      'flex',
      'flex-col',
      'z-40',
      'justify-between',
      'border-slate-200',
      'border',
      'p-4',
    )
    recommendationsElement.appendChild(newElement)
    updateElement(title, description, position)
  }

  function appendErrorElement(message: string) {
    const newElement = document.createElement('div')
    newElement.classList.add(
      'fontsemibold',
      'text-lg',
      'text-center',
      'mt-8',
      'text-red-500',
    )
    newElement.innerHTML = `${message}`
    recommendationsElement.appendChild(newElement)
  }

  function updateElement(title: string, description: string, position: number) {
    const element = recommendationsElement.children[position]
    element.innerHTML = `
            <h3 class="font-bold text-indigo-500 text-3xl mb-2">${title}</h3>
            <p class="text-slate-600 mb-4 text-lg">${description}</p>
        `
  }

  async function onSubmit(e: SubmitEvent) {
    e.preventDefault()
    addLoader()
    recommendationsElement.innerHTML = ''
    let error = ''
    let searchResponse = ''
    const formData = new FormData(e.target as HTMLFormElement)
    const fullSearchCriteria = generatePromptFromFormData(formData)
    if (form) form.reset()

    const response = await fetch('/api/getRecommendations', {
      method: 'POST',
      body: JSON.stringify({ searched: fullSearchCriteria }),
      headers: {
        'content-type': 'application/json',
      },
    })
    if (response.ok) {
      try {
        const data = response.body
        if (!data) {
          return
        }
        const reader = data.getReader()
        const decoder = new TextDecoder()
        while (true) {
          const { value, done } = await reader.read()
          const chunkValue = decoder.decode(value)
          searchResponse += chunkValue

          const copyResponse = searchResponse
          const recommendationBlocks = copyResponse?.split('\n').filter(Boolean)
          recommendationBlocks.forEach((recommendation, i) => {
            const { title, description } = getRecommendationInfo(recommendation)
            if (recommendationsElement.children[i] === undefined) {
              appendNewChild(title, description, i)
            } else {
              updateElement(title, description, i)
            }
            recommendationsElement.scrollIntoView()
          })

          if (done) {
            break
          }
        }
      } catch (err) {
        appendErrorElement('Looks like OpenAI timed out ðŸ’”')
      }
    } else {
      error = await response.text()
      appendErrorElement(error)
    }
    removeLoader()
  }

  form?.addEventListener('submit', onSubmit)
</script>
